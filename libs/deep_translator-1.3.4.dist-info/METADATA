Metadata-Version: 2.1
Name: deep-translator
Version: 1.3.4
Summary: A flexible python tool to translate between different languages in a simple way.
Home-page: https://github.com/nidhaloff/deep_translator
Author: Nidhal Baccouri
Author-email: nidhalbacc@gmail.com
Maintainer: Nidhal Baccouri
Maintainer-email: nidhalbacc@gmail.com
License: MIT license
Keywords: deep_translator,deepL,DeepL,translator,translation,automation,web scraping,google translator,google translation,google trans,PONS,YANDEX,MyMemory translator,Linguee,QCRI,Language,Language detection,detect language,free translation,unlimited translation,translate for free
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Education
Classifier: Topic :: Software Development
Classifier: Topic :: Communications
Classifier: Topic :: Text Processing
Classifier: Topic :: Text Processing :: Linguistic
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.0
Requires-Dist: beautifulsoup4
Requires-Dist: requests

##################
deep-translator
##################

.. image:: assets/icon.jpg
    :width: 100
    :align: center
    :alt: deep-translator-icon

|


.. image:: https://img.shields.io/pypi/v/deep-translator.svg
        :target: https://pypi.python.org/pypi/deep-translator
.. image:: https://img.shields.io/travis/nidhaloff/deep-translator.svg
        :target: https://travis-ci.com/nidhaloff/deep-translator
.. image:: https://readthedocs.org/projects/deep-translator/badge/?version=latest
        :target: https://deep-translator.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status
.. image:: https://img.shields.io/pypi/l/deep-translator
        :target: https://pypi.python.org/pypi/deep-translator

.. image:: https://img.shields.io/pypi/status/deep-translator
        :target: https://pypi.python.org/pypi/deep-translator

.. image:: https://pepy.tech/badge/deep-translator
    :target: https://pepy.tech/project/deep-translator


.. image:: https://img.shields.io/pypi/wheel/deep-translator
        :target: https://pypi.python.org/pypi/deep-translator

.. image:: https://img.shields.io/twitter/url?url=https%3A%2F%2Ftwitter.com%2FNidhalBaccouri
        :alt: Twitter URL
        :target: https://twitter.com/NidhalBaccouri

=======================
Translation for humans
=======================

A flexible **FREE** and **UNLIMITED** tool to translate between different languages in a simple way using multiple translators.


* Free software: MIT license
* Documentation: https://deep-translator.readthedocs.io.

==========
Motivation
==========

I needed to translate a text using python. It was hard to find a simple way to do it.
There are other libraries that can be used for this task, but most of them
are **buggy, not free, limited, not supported anymore or complex to use.**

Therefore, I decided to build this simple tool. It is 100% free, unlimited, easy to use and provide
support for all languages.

Basically, my goal was to integrate support for multiple famous translators
in this tool.

======================
When you should use it
======================

- If you want to translate text using python
- If you want to translate from a file
- If you want to get translations from many sources and not only one
- If you want to automate translations
- If you want to compare different translations
- If you want to detect language automatically

======================
Why you should use it
======================

- It's the only python tool that integrates many translators
- multi language support
- supports batch translation
- High level of abstraction
- Automatic language detection
- Easy to use and extend
- Support for most famous universal translators
- Stable and maintained regularly

========
Features
========

* Support for `google translate <https://translate.google.com/>`_
* Support for `Pons translator <https://de.pons.com/>`_
* Support for the `Linguee translator <https://www.linguee.com/>`_
* Support for the `Mymemory translator <https://mymemory.translated.net/>`_
* Support for the `Yandex translator <https://yandex.com/>`_ (version >= 1.2.1)
* Support for the `QCRI translator <https://mt.qcri.org/api/>`_ (version >= 1.2.4)
* Support for the `DeepL translator <https://www.deepl.com/en/translator/>`_ (version >= 1.2.5)
* Automatic single language detection
* Batch language detection
* Translate directly from a text file
* Get multiple translation for a word
* Automate the translation of different paragraphs in different languages
* Translate directly from terminal (version >= 1.1.0)

=============
Installation
=============

Install the stable release:

.. code-block:: console

    $ pip install -U deep_translator

take a look at the docs if you want to install from source.

============
Quick Start
============

.. code-block:: python

    from deep_translator import GoogleTranslator
    translated = GoogleTranslator(source='auto', target='de').translate("keep it up, you are awesome")  # output -> Weiter so, du bist gro√üartig

or from terminal

.. code-block:: console

    $ deep_translator -trans "google" -src "en" -tg "de" -txt "keep it up, you are awesome"


=====
Usage
=====

In this section, demos on how to use all different integrated translators in this tool are provided.

.. note::

    You can always pass the languages by the name or by abbreviation.

    *Example*: If you want to use english as a source or target language, you can pass **english** or **en** as an argument

Imports
--------

.. code-block:: python

    from deep_translator import (GoogleTranslator,
                                 PonsTranslator,
                                 LingueeTranslator,
                                 MyMemoryTranslator,
                                 YandexTranslator,
                                 DeepL,
                                 QCRI,
                                 single_detection,
                                 batch_detection)


Check Supported Languages
---------------------------

.. note::

    You can check the supported languages of each translator by calling the
    get_supported_languages function as a static method.

.. code-block:: python

    # default return type is a list
    langs_list = GoogleTranslator.get_supported_languages()  # output: [arabic, french, english etc...]

    # alternatively, you can the dictionary containing languages mapped to their abbreviation
    langs_dict = GoogleTranslator.get_supported_languages(as_dict=True)  # output: {arabic: ar, french: fr, english:en etc...}

Language Detection
------------------

.. note::

    You can also detect language automatically. Notice that this package is free and my goal is to keep it free.
    Therefore, you will need to get your own api_key if you want to use the language detection function.
    I figured out you can get one for free here: https://detectlanguage.com/documentation

- Single Text Detection

.. code-block:: python

    lang = single_detection('bonjour la vie', api_key='your_api_key')
    print(lang) # output: fr

- Batch Detection

.. code-block:: python

    lang = batch_detection(['bonjour la vie', 'hello world'], api_key='your_api_key')
    print(lang) # output: [fr, en]



Google Translate
-----------------

.. code-block:: python

    text = 'happy coding'

- You can use automatic language detection to detect the source language:

.. code-block:: python

    translated = GoogleTranslator(source='auto', target='de').translate(text=text)

- You can pass languages by name or by abbreviation:

.. code-block:: python

    translated = GoogleTranslator(source='auto', target='german').translate(text=text)

    # Alternatively, you can pass languages by their abbreviation:
    translated = GoogleTranslator(source='en', target='de').translate(text=text)

- Translate batch of texts

.. code-block:: python

    texts = ["hallo welt", "guten morgen"]

    # the translate_sentences function is deprecated, use the translate_batch function instead
    translated = GoogleTranslator('de', 'en').translate_batch(texts)

- Translate from a file:

.. code-block:: python

    translated = GoogleTranslator(source='auto', target='german').translate_file('path/to/file')

Mymemory Translator
--------------------

.. note::

    As in google translate, you can use the automatic language detection with mymemory by using "auto" as an
    argument for the source language. However, this feature in the mymemory translator is not so powerful as
    in google translate.

- Simple translation

.. code-block:: python

    text = 'Keep it up. You are awesome'

    translated = MyMemoryTranslator(source='auto', target='french').translate(text)

- Translate batch of texts

.. code-block:: python

    texts = ["hallo welt", "guten morgen"]

    # the translate_sentences function is deprecated, use the translate_batch function instead
    translated = MyMemoryTranslator('de', 'en').translate_batch(texts)

- Translate from file

.. code-block:: python

    path = "your_file.txt"

    translated = MyMemoryTranslator(source='en', target='fr').translate_file(path)


DeepL Translator
-----------------

.. note::

    In order to use the DeepL translator, you need to generate an api key. Visit https://www.deepl.com/en/docs-api/
    for more information

- Simple translation

.. code-block:: python

    text = 'Keep it up. You are awesome'

    translated = DeepL("your_api_key").translate(text)

- Translate batch of texts

.. code-block:: python

    texts = ["hallo welt", "guten morgen"]

    # the translate_sentences function is deprecated, use the translate_batch function instead
    translated = DeepL("your_api_key").translate_batch(texts)

QCRI Translator
--------------------

.. note::

    In order to use the QCRI translator, you need to generate a free api key. Visit https://mt.qcri.org/api/
    for more information

- Check languages

.. code-block:: python

    # as a property
    print("language pairs: ", QCRI("your_api_key").languages)

- Check domains

.. code-block:: python

    # as a property
    print("domains: ", QCRI("your_api_key").domains)

- Text translation

.. code-block:: python

    text = 'Education is great'

    translated = QCRI("your_api_key").translate(source='en', target='ar', domain="news", text=text)
    # output -> ÿßŸÑÿ™ÿπŸÑŸäŸÖ ŸáŸà ÿπÿ∏ŸäŸÖ

    # see docs for batch translation and more.

Linguee Translator
-------------------

.. code-block:: python

    word = 'good'

- Simple Translation

.. code-block:: python

    translated_word = LingueeTranslator(source='english', target='french').translate(word)

    # pass language by their abbreviation
    translated_word = LingueeTranslator(source='en', target='fr').translate(word)

- Return all synonyms or words that matches

.. code-block:: python

    # set the argument return_all to True if you want to get all synonyms of the word to translate
    translated_word = LingueeTranslator(source='english', target='french').translate(word, return_all=True)

- Translate a batch of words

.. code-block:: python

    translated_words = LingueeTranslator(source='english', target='french').translate_words(["good", "awesome"])

PONS Translator
----------------

.. note::

    You can pass the languages by the name or by abbreviation just like
    previous examples using GoogleTranslate

.. code-block:: python

    word = 'awesome'

- Simple Translation

.. code-block:: python

    translated_word = PonsTranslator(source='english', target='french').translate(word)

    # pass language by their abbreviation
    translated_word = PonsTranslator(source='en', target='fr').translate(word)

- Return all synonyms or words that matches

.. code-block:: python

    # set the argument return_all to True if you want to get all synonyms of the word to translate
    translated_word = PonsTranslator(source='english', target='french').translate(word, return_all=True)

- Translate a batch of words

.. code-block:: python

    translated_words = LingueeTranslator(source='english', target='french').translate_words(["good", "awesome"])

Yandex Translator
------------------

.. note::

    You need to require an **private api key** if you want to use the yandex translator.
    visit the official website for more information about how to get one

- Language detection

.. code-block:: python

    lang = YandexTranslator('your_api_key').detect('Hallo, Welt')
    print(f"language detected: {lang}")  # output -> language detected: 'de'

- Text translation

.. code-block:: python

    # with auto detection | meaning provide only the target language and let yandex detect the source
    translated = YandexTranslator('your_api_key').translate(source="auto", target="en", text='Hallo, Welt')
    print(f"translated text: {translated}")  # output -> translated text: Hello world

    # provide source and target language explicitly
    translated = YandexTranslator('your_api_key').translate(source="de", target="en", text='Hallo, Welt')
    print(f"translated text: {translated}")  # output -> translated text: Hello world

- File translation

.. code-block:: python

    translated = YandexTranslator('your_api_key').translate_file(source="auto", target="en", path="path_to_your_file")

- Batch translation

.. code-block:: python

    translated = YandexTranslator('your_api_key').translate_batch(source="auto", target="de", batch=["hello world", "happy coding"])


Usage from Terminal
--------------------

For a quick access, you can use the deep_translator from terminal. For this to work, you need to provide
the right arguments, which are the translator you want to use, source language, target language and the text
you want to translate.

For example, provide "google" as an argument to use the google translator. Alternatively you can use
the other supported translators. Just read the documentation to have an overview about the supported
translators in this library.

.. code-block:: console

    $ deep_translator --translator "google" --source "english" --target "german" --text "happy coding"

Or you can go for the short version:

.. code-block:: console

    $ deep_translator -trans "google" -src "english" -tg "german" -txt "happy coding"

If you want, you can also pass the source and target language by their abbreviation

.. code-block:: console

    $ deep_translator -trans "google" -src "en" -tg "de" -txt "happy coding"

======
Tests
======

- Install dev requirements

.. code-block:: console

    $ pip install -r requirements_dev.txt

- Or just install pytest

.. code-block:: console

    $ pip install pytest


- you can run tests individually for each translator by passing the prefix **test_** followed by the translator name as an argument to pytest.

.. code-block:: console

    $ pytest test_google_trans
    $ pytest test_linguee
    $ pytest test_mymemory
    $ pytest test_pons

- Alternatively, you can run the test suite

.. code-block:: console

    $ pytest -ra






========
Links
========
Check this article on medium to know why you should use the deep-translator package and how to translate text using python.
https://medium.com/@nidhalbacc/how-to-translate-text-with-python-9d203139dcf5


==========
Next Steps
==========

Take a look in the examples folder for more :)
Contributions are always welcome.
Read the Contribution guildlines `Here <https://deep-translator.readthedocs.io/en/latest/contributing.html/>`_

===========================
The Translator++ mobile app
===========================

.. image:: assets/app-icon.png
    :width: 100
    :alt: Icon of the app


After developing the deep_translator, I realised how cool this would be if I can use it as an app on my mobile phone.
Sure, there is google translate, pons and linguee apps etc.. but isn't it cooler to make an app where all these
translators are integrated?

Long story short, I started working on the app. I decided to use the `kivy framework <https://kivy.org/#home/>`_ since
I wanted to code in python and to develop a cross platform app.
I open sourced the `Translator++ app <https://github.com/nidhaloff/deep-translator-app/>`_ on my github too.
Feel free to take a look at the code or make a pull request ;)

.. note::
    The Translator++ app is based on the deep_translator package. I just built the app to prove the capabilities
    of the deep_translator package ;)

I published the first release on google play store on 02-08-2020

Here are some screenshots:

- Phone

.. image:: assets/translator1.jpg
    :width: 30%
    :height: 200
    :alt: screenshot1
.. image:: assets/translator2.jpg
    :width: 30%
    :height: 200
    :alt: screenshot2
.. image:: assets/spinner.jpg
    :width: 30%
    :height: 200
    :alt: spinner

- Tablet:

.. image:: assets/hz_view.png
    :width: 100%
    :height: 300
    :alt: screenshot3



==================
Important History
==================

-1.3.4 bug fixes for the dutch language
- 1.3.3 fixed bug in google translate

- 1.2.5: added support for the DeepL translator
- 1.2.4: added support for the QCRI translator
- 1.2.1: added support for the yandex translator
- 1.1.9: fixed bug in requests
- 1.1.5: added language detection
- 1.1.3: added support for mymemory
- 1.0.4: added support for pons
- 1.0.2: added support for linguee
- 1.0.0: added support for google translate


